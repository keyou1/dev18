一、可以打开已经存在的本地django项目
1.点击“Open”


二、可以通过git仓库下载django项目
1.选择git
    需要先安装git
2.复制粘贴django项目工程的git仓库地址


三、创建新的django项目工程
1.虚拟环境的意义
a.为了不同项目之间能够相互独立
b.不同项目如果使用的同一个模块版本不一致或者使用的python版本不一致
c.往往在项目部署时不需要虚拟环境，仅在开发环境下创建虚拟环境

2.切换虚拟环境
    a.正常情况下打开Terminal之后会自动切换到虚拟环境中
    b.查询是否进入虚拟环境中
        pip list
    b.如果未进入到虚拟环境中，可以手动进入到虚拟环境
        打开Terminal执行 ..\dev18\Scripts\activate.ps1

3.安装django
    a.使用国内安装源：https://pypi.tuna.tsinghua.edu.cn/simple
    b.使用命令行安装：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple django==3.2.25



4.创建Django项目工程
    》django-admin startproject 项目名称
      会在terminal所在目录下，创建一个新的、独立的django项目工程
    》django-admin startproject 项目名称 .
      会把terminal所在目录作为django项目的根目录，在此目录下创建项目
    》项目名称：建议设置为Python中合法的标识符名称
    》.代表在当前目录下创建
    》django中manage.py文件所在的路径才为Django项目的根路径

django-admin startproject --help
或者
django-admin help startproject

usage: django-admin startproject name [directory]

创建django项目工程的推荐方式：
django-admin startproject 项目名称 .
项目名称一般与项目根路径的名称保持一致


5.启动django项目
    方式一：社区版，调试比较麻烦，需要使用pdb命令行调试才行
        a.打开terminal，进入到虚拟环境（自动）
        b.python manage.py runserver
            会默认在127.0.0.1上监听8000端口
        c.在其他端口监听
            python manage.py runserver 其他大于1024的端口号
        d.python manage.py runserver ip:port（ip:可以省略）
        e.使用ctrl + c退出项目

    方式二：专业版
        a.在Pycharm专业版本上创建django的启动器
        b.点击右上角的“Add configuration” -> 点击“+”-> 选择“django” -> 设置启动的名称 -> 下方的“fix”
            -> Enable Django support -> 选django项目路径 -> settings.py所在路径


四、django项目工程结构
1.与项目名称同名的目录
dev18/          用于保存django项目各种配置信息，是一个包
    asgi.py     用于启动ASGI协议应用服务器的入口文件，在异步项目部署中使用
    settings.py 用于重写、指定django的全局配置信息
    urls.py     用于创建全局路由信息（路由条目）
    wsgi.py     用于启动WSGI协议应用服务器的入口文件，在项目部署上线时使用

db.sqlite3      django默认的关系型文本数据库文件，一般在开发阶段使用
manage.py       是django中命令行管理工具


2.django的默认配置
django/conf/global_settings.py
保存django所有的默认配置信息



五、设置版本管理
1.安装git或者svn

2.启动版本管理
方式一：
    打开VCS -> Enable Version Control -> git

方式二：
    》打开terminal，进入虚拟环境
    》git init，会在当前路径下进行版本管理，创建一个.git目录（存放git所有的配置信息）

3.git的结构
在本地有三个区域
工作区：不会记录版本信息，git status为红色
缓冲区：会临时记录版本信息，git status为绿色
存储区：会永久记录版本信息，git status为空


有两个仓库
本地存储仓库（存储区）：用户在本地保存的永久版本信息

远程存储仓库：多个用户保存的远程版本信息，一般用于协作


4.配置提交者信息
    查看配置信息：
        本地：git config --local --list
        全局：git config --global --list
    》创建提交者信息
        本地：
            git config --local user.name "用户名"
            git config --local user.email "用户邮箱地址"

        全局：
            git config --global user.name "用户名"
            git config --global user.email "用户邮箱地址"

        本地的优先级高于全局


5.常用的命令
git init                -> 开启git版本管理
git status              -> 查看状态
git config              -> 进行配置
git add . 或者 文件      ->  添加到缓存区
git commit -m ""        -> 添加到本地存储，并设置提交信息
git log                 -> 查看本地仓库的日志
git branch -a           -> 查看本地的所有分支信息
git checkout master     -> 切换到master分支
git checkout -b dev     -> 创建一个新的分支并进行切换

git remote add origin 你的仓库地址（可以是开源的仓库或者你公司的仓库）
查看有哪些remote：git remote
查看remote的详情：git remote show origin

为了在提交时不需要输入密码，需要进行如下配置：
生成公私钥对：ssh-keygen.exe
查看并复制公钥：cat ~/.ssh/id_rsa.pub
将公钥复制粘贴到github的Settings -> SSH and GPG key
将本地的记录推送到远程仓库：git push -u origin --all

6.分支管理
一般master主分支会作为发布分支（用于发布新版本）
一般在开发分支上进行开发（dev）、会在开发分支下进行自测（白盒测试、简单的冒烟测试）

但需求开发并自测通过之后，需要对应开发，去仓库上创建一个pr（pull request）
拥有仓库管理员权限的用户登录到仓库中，对开发提交的代码进行审核，审核通过之后，会将pr合并到master分支
在master分支下发版并进行各种测试

产生冲突的原因：
本地仓库中没有远程仓库中的一些修改记录，导致本地与远程不一致（远程的记录更新）

如何解决？
1.git pull 同步一下远程仓库的记录
2.git status 查看是否还有冲突，如果有冲突，直接修改冲突的代码
3.git add .
4.git commit -m "xxx"
5.git push

